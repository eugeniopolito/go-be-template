// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/users": {
            "get": {
                "description": "get paginated user list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "get the user list paginated",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "name": "size",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.userResponse"
                            }
                        }
                    }
                }
            }
        },
        "/admin/users/count": {
            "get": {
                "description": "get user count",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "get the user count for pagination",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.countUsersResponse"
                        }
                    }
                }
            }
        },
        "/user/{username}": {
            "get": {
                "description": "returns the user info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "get the user info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.userResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "create a new user. The created user will receive a confirmation email to activate the account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "create a new user",
                "parameters": [
                    {
                        "description": "createUserRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.createUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.userResponse"
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "returns a new PASETO token and the logged user info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "perform a new user login",
                "parameters": [
                    {
                        "description": "loginUserRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.loginUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.loginUserResponse"
                        }
                    },
                    "404": {
                        "description": "no rows in resultset"
                    }
                }
            }
        },
        "/users/logout": {
            "post": {
                "description": "delete the user session",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "perform a user logout",
                "responses": {
                    "200": {
                        "description": "Successfully logged out"
                    }
                }
            }
        },
        "/verify_email": {
            "get": {
                "description": "check the code received in the email during registration is correct",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "perform the user verification with email check",
                "parameters": [
                    {
                        "description": "verifyEmailRequest",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.verifyEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.verifyEmailResponse"
                        }
                    },
                    "500": {
                        "description": "failed to verify email"
                    }
                }
            }
        }
    },
    "definitions": {
        "api.countUsersResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                }
            }
        },
        "api.createUserRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "role",
                "surname",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                },
                "role": {
                    "description": "The Role of the user\nexample: 1 for admin, 2 for user",
                    "type": "integer"
                },
                "surname": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "api.loginUserRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "minLength": 6
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "api.loginUserResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/api.userResponse"
                }
            }
        },
        "api.userResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "description": "The Email of the user\nexample: joe.doe@email.com",
                    "type": "string"
                },
                "enabled": {
                    "description": "The enabled/disabeld flag\nexample: 0 for disabled, 1 for enabled",
                    "type": "boolean"
                },
                "name": {
                    "description": "The Name of he user\nexample: Some name",
                    "type": "string"
                },
                "password_change_at": {
                    "type": "string"
                },
                "role": {
                    "description": "The Role of the user\nexample: 1 for admin, 2 for user",
                    "type": "integer"
                },
                "surname": {
                    "description": "The Surname of he user\nexample: Some name",
                    "type": "string"
                },
                "username": {
                    "description": "The username of a thing\nexample: joedoe",
                    "type": "string"
                }
            }
        },
        "api.verifyEmailRequest": {
            "type": "object",
            "required": [
                "email_id",
                "secret_code"
            ],
            "properties": {
                "email_id": {
                    "type": "integer"
                },
                "secret_code": {
                    "type": "string"
                }
            }
        },
        "api.verifyEmailResponse": {
            "type": "object",
            "properties": {
                "is_verified": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

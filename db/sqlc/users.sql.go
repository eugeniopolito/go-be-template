// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countUsers = `-- name: CountUsers :one
SELECT count(*) FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, 
  password, 
  name,
  surname,
  enabled,
  role,
  email
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING username, password, name, surname, enabled, role, email, password_change_at, created_at, is_email_verified
`

type CreateUserParams struct {
	Username string      `json:"username"`
	Password string      `json:"password"`
	Name     string      `json:"name"`
	Surname  string      `json:"surname"`
	Enabled  bool        `json:"enabled"`
	Role     pgtype.Int4 `json:"role"`
	Email    string      `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Name,
		arg.Surname,
		arg.Enabled,
		arg.Role,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.Name,
		&i.Surname,
		&i.Enabled,
		&i.Role,
		&i.Email,
		&i.PasswordChangeAt,
		&i.CreatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE username = $1
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, deleteUser, username)
	return err
}

const getUser = `-- name: GetUser :one
SELECT username, password, name, surname, enabled, role, email, password_change_at, created_at, is_email_verified FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.Name,
		&i.Surname,
		&i.Enabled,
		&i.Role,
		&i.Email,
		&i.PasswordChangeAt,
		&i.CreatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT username, password, name, surname, enabled, role, email, password_change_at, created_at, is_email_verified FROM users
ORDER BY username
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Username,
			&i.Password,
			&i.Name,
			&i.Surname,
			&i.Enabled,
			&i.Role,
			&i.Email,
			&i.PasswordChangeAt,
			&i.CreatedAt,
			&i.IsEmailVerified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  is_email_verified = COALESCE($1, is_email_verified)
WHERE
  username = $2
RETURNING username, password, name, surname, enabled, role, email, password_change_at, created_at, is_email_verified
`

type UpdateUserParams struct {
	IsEmailVerified pgtype.Bool `json:"is_email_verified"`
	Username        string      `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.IsEmailVerified, arg.Username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.Name,
		&i.Surname,
		&i.Enabled,
		&i.Role,
		&i.Email,
		&i.PasswordChangeAt,
		&i.CreatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}

const updateUserEmail = `-- name: UpdateUserEmail :one
UPDATE users 
SET email = $1 
WHERE username = $2
RETURNING username, password, name, surname, enabled, role, email, password_change_at, created_at, is_email_verified
`

type UpdateUserEmailParams struct {
	Email    string `json:"email"`
	Username string `json:"username"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserEmail, arg.Email, arg.Username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.Name,
		&i.Surname,
		&i.Enabled,
		&i.Role,
		&i.Email,
		&i.PasswordChangeAt,
		&i.CreatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}
